{% doc %}
  @prompt
    Using shopify 'group' block, add a toggle yes / no feature to turn the group contents into a rotating slider. If toggled 'yes', all blocks added to the group should become items in a slider that can rotate on arrow or dot or autoplay

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-group-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .ai-group-slider-container-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.3s ease;
    width: 100%;
  }

  .ai-group-slider-container-{{ ai_gen_id }}.no-transition {
    transition: none;
  }

  .ai-group-slider-item-{{ ai_gen_id }} {
    flex: 0 0 100%;
    width: 100%;
  }

  .ai-group-static-{{ ai_gen_id }} .ai-group-slider-item-{{ ai_gen_id }} {
    flex: 1 1 auto;
    width: auto;
  }

  .ai-group-static-{{ ai_gen_id }} .ai-group-slider-container-{{ ai_gen_id }} {
    display: block;
  }

  .ai-group-controls-{{ ai_gen_id }} {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
  }

  .ai-group-static-{{ ai_gen_id }} .ai-group-controls-{{ ai_gen_id }} {
    display: none;
  }

  .ai-group-arrows-{{ ai_gen_id }} {
    display: flex;
    gap: 10px;
  }

  .ai-group-arrow-{{ ai_gen_id }} {
    width: {{ block.settings.arrow_size }}px;
    height: {{ block.settings.arrow_size }}px;
    border: none;
    border-radius: 50%;
    background-color: {{ block.settings.arrow_background_color }};
    color: {{ block.settings.arrow_color }};
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
  }

  .ai-group-arrow-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.arrow_hover_background_color }};
    color: {{ block.settings.arrow_hover_color }};
  }

  .ai-group-arrow-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-group-arrow-{{ ai_gen_id }} svg {
    width: calc({{ block.settings.arrow_size }}px * 0.5);
    height: calc({{ block.settings.arrow_size }}px * 0.5);
  }

  .ai-group-dots-{{ ai_gen_id }} {
    display: flex;
    gap: 8px;
    justify-content: center;
  }

  .ai-group-dot-{{ ai_gen_id }} {
    width: {{ block.settings.dot_size }}px;
    height: {{ block.settings.dot_size }}px;
    border: none;
    border-radius: 50%;
    background-color: {{ block.settings.dot_inactive_color }};
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .ai-group-dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
  }

  .ai-group-dot-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.dot_hover_color }};
  }

  .ai-group-autoplay-indicator-{{ ai_gen_id }} {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    display: none;
  }

  .ai-group-slider-{{ ai_gen_id }}.autoplay .ai-group-autoplay-indicator-{{ ai_gen_id }} {
    display: block;
  }

  @media screen and (max-width: 749px) {
    .ai-group-controls-{{ ai_gen_id }} {
      flex-direction: column;
      gap: 15px;
    }
  }
{% endstyle %}

<group-slider-{{ ai_gen_id }}
  class="ai-group-slider-{{ ai_gen_id }} {% unless block.settings.enable_slider %}ai-group-static-{{ ai_gen_id }}{% endunless %}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed }}"
  {{ block.shopify_attributes }}
>
  {% if block.settings.enable_slider and block.settings.autoplay %}
    <div class="ai-group-autoplay-indicator-{{ ai_gen_id }}">
      Auto-playing
    </div>
  {% endif %}

  <div class="ai-group-slider-container-{{ ai_gen_id }}">
    {% for block in blocks %}
      <div class="ai-group-slider-item-{{ ai_gen_id }}">
        {% render block %}
      </div>
    {% endfor %}
  </div>

  {% if block.settings.enable_slider %}
    <div class="ai-group-controls-{{ ai_gen_id }}">
      {% if block.settings.show_arrows %}
        <div class="ai-group-arrows-{{ ai_gen_id }}">
          <button
            class="ai-group-arrow-{{ ai_gen_id }} ai-group-arrow-prev-{{ ai_gen_id }}"
            aria-label="Previous slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <button
            class="ai-group-arrow-{{ ai_gen_id }} ai-group-arrow-next-{{ ai_gen_id }}"
            aria-label="Next slide"
          >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>
      {% endif %}

      {% if block.settings.show_dots %}
        <div class="ai-group-dots-{{ ai_gen_id }}">
          {% for block in blocks %}
            <button
              class="ai-group-dot-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}"
              aria-label="Go to slide {{ forloop.index }}"
              data-slide="{{ forloop.index0 }}"
            ></button>
          {% endfor %}
        </div>
      {% endif %}
    </div>
  {% endif %}
</group-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class GroupSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
        this.autoplayInterval = null;
        this.isAutoplay = false;
        this.autoplaySpeed = 3000;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-group-slider-container-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-group-slider-item-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-group-arrow-prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-group-arrow-next-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-group-dot-{{ ai_gen_id }}');
        
        this.totalSlides = this.slides.length;
        this.isAutoplay = this.dataset.autoplay === 'true';
        this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) * 1000;

        if (this.totalSlides <= 1) return;

        this.setupEventListeners();
        this.updateSlider();

        if (this.isAutoplay) {
          this.startAutoplay();
        }
      }

      disconnectedCallback() {
        this.stopAutoplay();
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => {
            this.stopAutoplay();
            this.goToPrevSlide();
          });
        }

        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => {
            this.stopAutoplay();
            this.goToNextSlide();
          });
        }

        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', () => {
            this.stopAutoplay();
            this.goToSlide(index);
          });
        });

        this.addEventListener('mouseenter', () => {
          if (this.isAutoplay) {
            this.stopAutoplay();
          }
        });

        this.addEventListener('mouseleave', () => {
          if (this.dataset.autoplay === 'true') {
            this.startAutoplay();
          }
        });

        let startX = 0;
        let currentX = 0;
        let isDragging = false;

        this.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
          this.container.classList.add('no-transition');
        });

        this.addEventListener('touchmove', (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
          const deltaX = currentX - startX;
          const currentTransform = -this.currentSlide * 100;
          const newTransform = currentTransform + (deltaX / this.offsetWidth) * 100;
          this.container.style.transform = `translateX(${newTransform}%)`;
        });

        this.addEventListener('touchend', (e) => {
          if (!isDragging) return;
          isDragging = false;
          this.container.classList.remove('no-transition');
          
          const deltaX = currentX - startX;
          const threshold = this.offsetWidth * 0.2;

          if (Math.abs(deltaX) > threshold) {
            if (deltaX > 0) {
              this.goToPrevSlide();
            } else {
              this.goToNextSlide();
            }
          } else {
            this.updateSlider();
          }
        });
      }

      goToPrevSlide() {
        this.currentSlide = this.currentSlide > 0 ? this.currentSlide - 1 : this.totalSlides - 1;
        this.updateSlider();
      }

      goToNextSlide() {
        this.currentSlide = this.currentSlide < this.totalSlides - 1 ? this.currentSlide + 1 : 0;
        this.updateSlider();
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateSlider();
      }

      updateSlider() {
        if (this.container) {
          this.container.style.transform = `translateX(-${this.currentSlide * 100}%)`;
        }

        if (this.prevButton) {
          this.prevButton.disabled = false;
        }
        if (this.nextButton) {
          this.nextButton.disabled = false;
        }

        this.dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });
      }

      startAutoplay() {
        if (this.totalSlides <= 1) return;
        this.stopAutoplay();
        this.autoplayInterval = setInterval(() => {
          this.goToNextSlide();
        }, this.autoplaySpeed);
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }
    }

    customElements.define('group-slider-{{ ai_gen_id }}', GroupSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Group slider",
  "tag": null,
  "class": "group-slider-block",
  "settings": [
    {
      "type": "header",
      "content": "Slider settings"
    },
    {
      "type": "checkbox",
      "id": "enable_slider",
      "label": "Enable slider",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Auto-play slides",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-play speed",
      "default": 3
    },
    {
      "type": "header",
      "content": "Navigation"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "label": "Show arrow buttons",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dot indicators",
      "default": true
    },
    {
      "type": "header",
      "content": "Arrow style"
    },
    {
      "type": "range",
      "id": "arrow_size",
      "min": 30,
      "max": 60,
      "step": 2,
      "unit": "px",
      "label": "Arrow size",
      "default": 40
    },
    {
      "type": "color",
      "id": "arrow_background_color",
      "label": "Arrow background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "arrow_hover_background_color",
      "label": "Arrow hover background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "arrow_hover_color",
      "label": "Arrow hover color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Dot style"
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 8,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Dot size",
      "default": 12
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "dot_inactive_color",
      "label": "Inactive dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_hover_color",
      "label": "Dot hover color",
      "default": "#666666"
    }
  ],
  "presets": [
    {
      "name": "Group slider"
    }
  ]
}
{% endschema %}