{% doc %}
  @prompt
    using the existing group block, add a checkbox yes / no option that the blocks added to the group will yes / no be able to rotate as a slider

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-group-slider-{{ ai_gen_id }} {
    position: relative;
    width: 100%;
    overflow: hidden;
  }

  .ai-group-slider-container-{{ ai_gen_id }} {
    display: flex;
    transition: transform 0.5s ease;
    width: 100%;
  }

  .ai-group-slider-{{ ai_gen_id }}[data-slider="false"] .ai-group-slider-container-{{ ai_gen_id }} {
    display: block;
  }

  .ai-group-slider-slide-{{ ai_gen_id }} {
    flex: 0 0 100%;
    width: 100%;
  }

  .ai-group-slider-{{ ai_gen_id }}[data-slider="false"] .ai-group-slider-slide-{{ ai_gen_id }} {
    flex: none;
    width: auto;
  }

  .ai-group-slider-controls-{{ ai_gen_id }} {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 20px;
    margin-top: 20px;
  }

  .ai-group-slider-{{ ai_gen_id }}[data-slider="false"] .ai-group-slider-controls-{{ ai_gen_id }} {
    display: none;
  }

  .ai-group-slider-button-{{ ai_gen_id }} {
    background-color: {{ block.settings.control_color }};
    color: {{ block.settings.control_text_color }};
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-group-slider-button-{{ ai_gen_id }}:hover {
    background-color: {{ block.settings.control_hover_color }};
  }

  .ai-group-slider-button-{{ ai_gen_id }}:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .ai-group-slider-dots-{{ ai_gen_id }} {
    display: flex;
    gap: 8px;
  }

  .ai-group-slider-dot-{{ ai_gen_id }} {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    cursor: pointer;
    transition: background-color 0.3s ease;
  }

  .ai-group-slider-dot-{{ ai_gen_id }}.active {
    background-color: {{ block.settings.dot_active_color }};
  }

  .ai-group-slider-{{ ai_gen_id }}[data-autoplay="true"] .ai-group-slider-controls-{{ ai_gen_id }} {
    opacity: 0.7;
  }

  .ai-group-slider-{{ ai_gen_id }}[data-autoplay="true"]:hover .ai-group-slider-controls-{{ ai_gen_id }} {
    opacity: 1;
  }

  @media screen and (max-width: 749px) {
    .ai-group-slider-button-{{ ai_gen_id }} {
      width: 35px;
      height: 35px;
    }
  }
{% endstyle %}

<group-slider-{{ ai_gen_id }}
  class="ai-group-slider-{{ ai_gen_id }}"
  data-slider="{{ block.settings.enable_slider }}"
  data-autoplay="{{ block.settings.autoplay }}"
  data-autoplay-speed="{{ block.settings.autoplay_speed }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-group-slider-container-{{ ai_gen_id }}">
    {% for block in blocks %}
      <div class="ai-group-slider-slide-{{ ai_gen_id }}">
        {% render block %}
      </div>
    {% endfor %}
  </div>

  {% if block.settings.enable_slider and blocks.size > 1 %}
    <div class="ai-group-slider-controls-{{ ai_gen_id }}">
      <button
        class="ai-group-slider-button-{{ ai_gen_id }} ai-group-slider-prev-{{ ai_gen_id }}"
        aria-label="Previous slide"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>

      <div class="ai-group-slider-dots-{{ ai_gen_id }}">
        {% for block in blocks %}
          <button
            class="ai-group-slider-dot-{{ ai_gen_id }} {% if forloop.first %}active{% endif %}"
            aria-label="Go to slide {{ forloop.index }}"
            data-slide="{{ forloop.index0 }}"
          ></button>
        {% endfor %}
      </div>

      <button
        class="ai-group-slider-button-{{ ai_gen_id }} ai-group-slider-next-{{ ai_gen_id }}"
        aria-label="Next slide"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
    </div>
  {% endif %}
</group-slider-{{ ai_gen_id }}>

<script>
  (function() {
    class GroupSlider{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.currentSlide = 0;
        this.totalSlides = 0;
        this.autoplayInterval = null;
      }

      connectedCallback() {
        this.container = this.querySelector('.ai-group-slider-container-{{ ai_gen_id }}');
        this.slides = this.querySelectorAll('.ai-group-slider-slide-{{ ai_gen_id }}');
        this.prevButton = this.querySelector('.ai-group-slider-prev-{{ ai_gen_id }}');
        this.nextButton = this.querySelector('.ai-group-slider-next-{{ ai_gen_id }}');
        this.dots = this.querySelectorAll('.ai-group-slider-dot-{{ ai_gen_id }}');
        
        this.totalSlides = this.slides.length;
        this.isSliderEnabled = this.dataset.slider === 'true';
        this.autoplayEnabled = this.dataset.autoplay === 'true';
        this.autoplaySpeed = parseInt(this.dataset.autoplaySpeed) * 1000;

        if (this.isSliderEnabled && this.totalSlides > 1) {
          this.setupEventListeners();
          this.updateSlide();
          
          if (this.autoplayEnabled) {
            this.startAutoplay();
            this.addEventListener('mouseenter', () => this.stopAutoplay());
            this.addEventListener('mouseleave', () => this.startAutoplay());
          }
        }
      }

      disconnectedCallback() {
        this.stopAutoplay();
      }

      setupEventListeners() {
        if (this.prevButton) {
          this.prevButton.addEventListener('click', () => this.previousSlide());
        }
        
        if (this.nextButton) {
          this.nextButton.addEventListener('click', () => this.nextSlide());
        }

        this.dots.forEach((dot, index) => {
          dot.addEventListener('click', () => this.goToSlide(index));
        });

        document.addEventListener('keydown', (e) => {
          if (this.contains(document.activeElement)) {
            if (e.key === 'ArrowLeft') {
              e.preventDefault();
              this.previousSlide();
            } else if (e.key === 'ArrowRight') {
              e.preventDefault();
              this.nextSlide();
            }
          }
        });
      }

      updateSlide() {
        if (!this.container) return;

        const translateX = -this.currentSlide * 100;
        this.container.style.transform = `translateX(${translateX}%)`;

        this.dots.forEach((dot, index) => {
          dot.classList.toggle('active', index === this.currentSlide);
        });

        if (this.prevButton) {
          this.prevButton.disabled = this.currentSlide === 0;
        }
        
        if (this.nextButton) {
          this.nextButton.disabled = this.currentSlide === this.totalSlides - 1;
        }
      }

      nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
          this.currentSlide++;
        } else {
          this.currentSlide = 0;
        }
        this.updateSlide();
      }

      previousSlide() {
        if (this.currentSlide > 0) {
          this.currentSlide--;
        } else {
          this.currentSlide = this.totalSlides - 1;
        }
        this.updateSlide();
      }

      goToSlide(index) {
        this.currentSlide = index;
        this.updateSlide();
      }

      startAutoplay() {
        if (!this.autoplayEnabled || this.totalSlides <= 1) return;
        
        this.stopAutoplay();
        this.autoplayInterval = setInterval(() => {
          this.nextSlide();
        }, this.autoplaySpeed);
      }

      stopAutoplay() {
        if (this.autoplayInterval) {
          clearInterval(this.autoplayInterval);
          this.autoplayInterval = null;
        }
      }
    }

    customElements.define('group-slider-{{ ai_gen_id }}', GroupSlider{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Group with slider",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Slider settings"
    },
    {
      "type": "checkbox",
      "id": "enable_slider",
      "label": "Enable slider rotation",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Auto-rotate slides",
      "default": false
    },
    {
      "type": "range",
      "id": "autoplay_speed",
      "min": 2,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Auto-rotate speed",
      "default": 5
    },
    {
      "type": "header",
      "content": "Control colors"
    },
    {
      "type": "color",
      "id": "control_color",
      "label": "Control background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "control_text_color",
      "label": "Control icon",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "control_hover_color",
      "label": "Control hover background",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#cccccc"
    },
    {
      "type": "color",
      "id": "dot_active_color",
      "label": "Active dot color",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Group with slider"
    }
  ]
}
{% endschema %}