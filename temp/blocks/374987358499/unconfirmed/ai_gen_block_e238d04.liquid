{% doc %}
  @prompt
    create a group of tabbed content. 3 tabs, with option of adding more if needed. Each tab should have title and content. first tab should open by default. all color and font choices should use current theme selections

{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-tabbed-content-{{ ai_gen_id }} {
    width: 100%;
    max-width: 100%;
  }

  .ai-tab-list-{{ ai_gen_id }} {
    display: flex;
    flex-wrap: wrap;
    border-bottom: 1px solid rgb(var(--color-border));
    margin-bottom: 24px;
    gap: 0;
  }

  .ai-tab-button-{{ ai_gen_id }} {
    background: none;
    border: none;
    padding: 16px 24px;
    cursor: pointer;
    font-family: var(--font-body-family);
    font-size: 16px;
    color: rgb(var(--color-foreground));
    border-bottom: 2px solid transparent;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .ai-tab-button-{{ ai_gen_id }}:hover {
    color: rgb(var(--color-primary));
    background-color: rgba(var(--color-primary), 0.05);
  }

  .ai-tab-button-{{ ai_gen_id }}.active {
    color: rgb(var(--color-primary));
    border-bottom-color: rgb(var(--color-primary));
    background-color: rgba(var(--color-primary), 0.05);
  }

  .ai-tab-content-{{ ai_gen_id }} {
    display: none;
    animation: ai-fade-in-{{ ai_gen_id }} 0.3s ease-in-out;
  }

  .ai-tab-content-{{ ai_gen_id }}.active {
    display: block;
  }

  .ai-tab-content-text-{{ ai_gen_id }} {
    font-family: var(--font-body-family);
    font-size: 16px;
    line-height: 1.6;
    color: rgb(var(--color-foreground));
  }

  @keyframes ai-fade-in-{{ ai_gen_id }} {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media screen and (max-width: 749px) {
    .ai-tab-list-{{ ai_gen_id }} {
      flex-direction: column;
    }

    .ai-tab-button-{{ ai_gen_id }} {
      text-align: left;
      border-bottom: 1px solid rgb(var(--color-border));
      border-right: none;
    }

    .ai-tab-button-{{ ai_gen_id }}.active {
      border-bottom-color: rgb(var(--color-primary));
      border-left: 3px solid rgb(var(--color-primary));
    }
  }
{% endstyle %}

<tabbed-content-{{ ai_gen_id }}
  class="ai-tabbed-content-{{ ai_gen_id }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-tab-list-{{ ai_gen_id }}" role="tablist">
    {% for i in (1..block.settings.tab_count) %}
      {% liquid
        assign tab_title_key = 'tab_' | append: i | append: '_title'
        assign tab_title = block.settings[tab_title_key]
      %}
      {% if tab_title != blank %}
        <button
          class="ai-tab-button-{{ ai_gen_id }}{% if forloop.first %} active{% endif %}"
          role="tab"
          aria-selected="{% if forloop.first %}true{% else %}false{% endif %}"
          aria-controls="ai-tab-panel-{{ ai_gen_id }}-{{ i }}"
          id="ai-tab-{{ ai_gen_id }}-{{ i }}"
          data-tab="{{ i }}"
        >
          {{ tab_title }}
        </button>
      {% endif %}
    {% endfor %}
  </div>

  <div class="ai-tab-panels-{{ ai_gen_id }}">
    {% for i in (1..block.settings.tab_count) %}
      {% liquid
        assign tab_title_key = 'tab_' | append: i | append: '_title'
        assign tab_content_key = 'tab_' | append: i | append: '_content'
        assign tab_title = block.settings[tab_title_key]
        assign tab_content = block.settings[tab_content_key]
      %}
      {% if tab_title != blank %}
        <div
          class="ai-tab-content-{{ ai_gen_id }}{% if forloop.first %} active{% endif %}"
          role="tabpanel"
          aria-labelledby="ai-tab-{{ ai_gen_id }}-{{ i }}"
          id="ai-tab-panel-{{ ai_gen_id }}-{{ i }}"
        >
          <div class="ai-tab-content-text-{{ ai_gen_id }}">
            {{ tab_content }}
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</tabbed-content-{{ ai_gen_id }}>

<script>
  (function() {
    class TabbedContent{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
      }

      connectedCallback() {
        this.tabButtons = this.querySelectorAll('.ai-tab-button-{{ ai_gen_id }}');
        this.tabPanels = this.querySelectorAll('.ai-tab-content-{{ ai_gen_id }}');
        this.setupEventListeners();
      }

      setupEventListeners() {
        this.tabButtons.forEach((button) => {
          button.addEventListener('click', (e) => {
            const tabNumber = e.target.dataset.tab;
            this.switchTab(tabNumber);
          });

          button.addEventListener('keydown', (e) => {
            this.handleKeydown(e);
          });
        });
      }

      switchTab(tabNumber) {
        this.tabButtons.forEach((button, index) => {
          const isActive = button.dataset.tab === tabNumber;
          button.classList.toggle('active', isActive);
          button.setAttribute('aria-selected', isActive);
        });

        this.tabPanels.forEach((panel, index) => {
          const isActive = panel.id === `ai-tab-panel-{{ ai_gen_id }}-${tabNumber}`;
          panel.classList.toggle('active', isActive);
        });
      }

      handleKeydown(e) {
        const currentIndex = Array.from(this.tabButtons).indexOf(e.target);
        let newIndex;

        switch (e.key) {
          case 'ArrowLeft':
            e.preventDefault();
            newIndex = currentIndex > 0 ? currentIndex - 1 : this.tabButtons.length - 1;
            break;
          case 'ArrowRight':
            e.preventDefault();
            newIndex = currentIndex < this.tabButtons.length - 1 ? currentIndex + 1 : 0;
            break;
          case 'Home':
            e.preventDefault();
            newIndex = 0;
            break;
          case 'End':
            e.preventDefault();
            newIndex = this.tabButtons.length - 1;
            break;
          default:
            return;
        }

        this.tabButtons[newIndex].focus();
        this.switchTab(this.tabButtons[newIndex].dataset.tab);
      }
    }

    customElements.define('tabbed-content-{{ ai_gen_id }}', TabbedContent{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Tabbed content",
  "settings": [
    {
      "type": "range",
      "id": "tab_count",
      "min": 3,
      "max": 8,
      "step": 1,
      "label": "Number of tabs",
      "default": 3
    },
    {
      "type": "header",
      "content": "Tab 1"
    },
    {
      "type": "text",
      "id": "tab_1_title",
      "label": "Tab title",
      "default": "Features"
    },
    {
      "type": "richtext",
      "id": "tab_1_content",
      "label": "Tab content",
      "default": "<p>Describe the key features and benefits of your product or service here.</p>"
    },
    {
      "type": "header",
      "content": "Tab 2"
    },
    {
      "type": "text",
      "id": "tab_2_title",
      "label": "Tab title",
      "default": "Specifications"
    },
    {
      "type": "richtext",
      "id": "tab_2_content",
      "label": "Tab content",
      "default": "<p>Include detailed specifications, dimensions, or technical information.</p>"
    },
    {
      "type": "header",
      "content": "Tab 3"
    },
    {
      "type": "text",
      "id": "tab_3_title",
      "label": "Tab title",
      "default": "Reviews"
    },
    {
      "type": "richtext",
      "id": "tab_3_content",
      "label": "Tab content",
      "default": "<p>Share customer reviews and testimonials to build trust.</p>"
    },
    {
      "type": "header",
      "content": "Tab 4"
    },
    {
      "type": "text",
      "id": "tab_4_title",
      "label": "Tab title"
    },
    {
      "type": "richtext",
      "id": "tab_4_content",
      "label": "Tab content"
    },
    {
      "type": "header",
      "content": "Tab 5"
    },
    {
      "type": "text",
      "id": "tab_5_title",
      "label": "Tab title"
    },
    {
      "type": "richtext",
      "id": "tab_5_content",
      "label": "Tab content"
    },
    {
      "type": "header",
      "content": "Tab 6"
    },
    {
      "type": "text",
      "id": "tab_6_title",
      "label": "Tab title"
    },
    {
      "type": "richtext",
      "id": "tab_6_content",
      "label": "Tab content"
    },
    {
      "type": "header",
      "content": "Tab 7"
    },
    {
      "type": "text",
      "id": "tab_7_title",
      "label": "Tab title"
    },
    {
      "type": "richtext",
      "id": "tab_7_content",
      "label": "Tab content"
    },
    {
      "type": "header",
      "content": "Tab 8"
    },
    {
      "type": "text",
      "id": "tab_8_title",
      "label": "Tab title"
    },
    {
      "type": "richtext",
      "id": "tab_8_content",
      "label": "Tab content"
    }
  ],
  "presets": [
    {
      "name": "Tabbed content"
    }
  ],
  "tag": null
}
{% endschema %}